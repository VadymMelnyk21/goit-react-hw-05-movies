{"version":3,"file":"static/js/948.aa9130a4.chunk.js","mappings":"kOAEaA,EAAOC,EAAAA,GAAAA,EAAH,gI,SCCF,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,SAACH,EAAD,UAAOG,IAGhBC,MAAMC,UAAY,CAChBF,QAASG,IAAAA,OAAAA,YCNJ,I,MAAMC,EAAON,EAAAA,GAAAA,GAAH,0NCAJO,EAAOP,EAAAA,GAAAA,GAAH,2QAWJQ,EAAQR,EAAAA,GAAAA,IAAH,mGAOLS,EAAQT,EAAAA,GAAAA,GAAH,qF,oBChBH,SAASU,EAAT,GAAgD,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC5CC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACR,EAAD,WACE,UAAC,KAAD,CAAMS,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMJ,GAA1C,WACE,0BACE,SAACN,EAAD,CACEW,IACEN,EAAM,yCACgCA,GAClC,8FAENO,IAAI,eAGR,SAACX,EAAD,UAAQG,GAAkB,2DChBnB,SAASS,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAClC,OACE,SAAChB,EAAD,UACGgB,EAAOC,KAAI,YAA0C,IAAvCZ,EAAsC,EAAtCA,GAAIa,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YACjC,OACE,SAACf,EAAD,CAEEC,GAAIA,EACJC,OAAQY,EACRX,OAAQY,GAHHd,Q,wECRXe,EAAM,mCAGZ,aAAO,OAAP,oBAAO,wGACoBC,IAAAA,IAAA,sCAAyCD,EAAzC,wBADpB,uBACKE,EADL,EACKA,KAEFC,EAAaD,EAAKE,QAAQP,KAAI,kBAA0C,CAAEZ,GAA5C,EAAGA,GAA6Ca,eAAhD,EAAOA,eAAyDC,YAAhE,EAAuBA,gBAHxD,kBAKII,GALJ,kEAFPF,IAAAA,SAAAA,QAAyB,+BCAlB,IAAMI,EAAmB,WAC9B,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,YDFL,WAAP,gCCGIC,GACGC,MAAK,SAAAV,GACJK,EAAUL,GAEU,IAAhBA,EAAKW,QACPJ,EAAS,wGAGZK,OAAM,SAAAN,GAAK,OAAIC,EAASD,EAAMhC,cAChC,IAEI,CAAEoB,OAAAA,EAAQY,MAAAA,ICfJ,SAASO,IACtB,MAA0BV,IAAlBT,EAAR,EAAQA,OAAQY,EAAhB,EAAgBA,MAEhB,OACE,+BACGA,IAAS,SAACjC,EAAD,CAAcC,QAASgC,IAChCZ,IAAU,SAACD,EAAD,CAAWC,OAAQA","sources":["components/Error/Error.styled.jsx","components/Error/Error.jsx","components/MovieList/MovieList.styled.jsx","components/MovieListItem/MovieListItem.styled.jsx","components/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.jsx","services/API.js","hooks/useFetchTrending.jsx","pages/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Text = styled.p`\n  margin-top: 50px;\n  text-align: center;\n  color: #42362b;\n  font-size: 30px;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { Text } from './Error.styled';\n\nexport default function ErrorMessage({ message }) {\n  return <Text>{message}</Text>;\n}\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 16px;\n  margin: 20px auto;\n  padding: 0;\n  list-style: none;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.03);\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n`;\n\nexport const Title = styled.h2`\n  padding: 5px 10px;\n  font-size: 21px;\n  color: #42362b;\n`;\n","import { Item, Image, Title } from './MovieListItem.styled';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function MovieListItem({ id, tittle, poster }) {\n  const location = useLocation();\n\n  return (\n    <Item>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <div>\n          <Image\n            src={\n              poster\n                ? `https://image.tmdb.org/t/p/w500${poster}`\n                : 'Постер відсутній'\n            }\n            alt=\"{title}\"\n          />\n        </div>\n        <Title>{tittle ? tittle : 'Без назви'}</Title>\n      </Link>\n    </Item>\n  );\n}\n\nMovieListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  tittle: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n};\n","import { List } from './MovieList.styled';\nimport MovieListItem from 'components/MovieListItem/MovieListItem';\nimport PropTypes from 'prop-types';\n\nexport default function MovieList({ movies }) {\n  return (\n    <List>\n      {movies.map(({ id, original_title, poster_path }) => {\n        return (\n          <MovieListItem\n            key={id}\n            id={id}\n            tittle={original_title}\n            poster={poster_path}\n          />\n        );\n      })}\n    </List>\n  );\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import axios from \"axios\";\n\nconst key = '6169d862ccc0d011b31a05667d9a5c10';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\n\nexport async function fetchTrending() {\n    const { data } = await axios.get(`/trending/movie/day?api_key=${key}&language=uk&page=1`);\n\n    const moviesInfo = data.results.map(({ id, original_title, poster_path }) => ({ id, original_title, poster_path }))\n\n    return moviesInfo;\n}\n\nexport async function fetchSearch(query) {\n    const { data } = await axios.get(`/search/movie?api_key=${key}&query=${query}&language=uk&page=1`);\n    return data;\n}\n\nexport async function fetchMovieDetails(movieId) {\n    const { data } = await axios.get(`/movie/${movieId}?api_key=${key}&language=uk`);\n    return data;\n}\n\nexport async function fetchMovieCredits(movieId) {\n    const { data } = await axios.get(`/movie/${movieId}/credits?api_key=${key}&language=uk`);\n    return data;\n}\n\nexport async function fetchMovieReviews(movieId) {\n    const { data } = await axios.get(`/movie/${movieId}/reviews?api_key=${key}&language=uk&page=1`);\n    return data;\n}\n\n\n\n\n\n\n\n// /trending/get - trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// / search / search - movies пошук фільму за ключовим словом на сторінці фільмів.\n// / movies / get - movie - details запит повної інформації про фільм для сторінки кінофільму.\n// / movies / get - movie - credits запит інформації про акторський склад для сторінки кінофільму.\n// / movies / get - movie - reviews запит оглядів для сторінки кінофільму.","import { useEffect, useState } from 'react';\nimport { fetchTrending } from '../services/API';\n\nexport const useFetchTrending = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchTrending()\n      .then(data => {\n        setMovies(data);\n\n        if (data.length === 0) {\n          setError('Контент відсутній');\n        }\n      })\n      .catch(error => setError(error.message));\n  }, []);\n\n  return { movies, error };\n};\n","import ErrorMessage from 'components/Error/Error';\nimport MovieList from 'components/MovieList/MovieList';\nimport { useFetchTrending } from '../hooks/useFetchTrending';\n\nexport default function HomePage() {\n  const { movies, error } = useFetchTrending();\n\n  return (\n    <section>\n      {error && <ErrorMessage message={error} />}\n      {movies && <MovieList movies={movies} />}\n    </section>\n  );\n}\n"],"names":["Text","styled","ErrorMessage","message","Error","propTypes","PropTypes","List","Item","Image","Title","MovieListItem","id","tittle","poster","location","useLocation","to","state","from","src","alt","MovieList","movies","map","original_title","poster_path","key","axios","data","moviesInfo","results","useFetchTrending","useState","setMovies","error","setError","useEffect","fetchTrending","then","length","catch","HomePage"],"sourceRoot":""}